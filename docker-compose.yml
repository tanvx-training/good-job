version: '3.8'

networks:
  backend-network:
    driver: bridge

volumes:
    postgres-data:

services:
  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres-1
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  zoo1:
    image: confluentinc/cp-zookeeper:7.5.3
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.5.3
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1

  kafka2:
    image: confluentinc/cp-kafka:7.5.3
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1

  kafka3:
    image: confluentinc/cp-kafka:7.5.3
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  loki:
    image: grafana/loki
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  tempo:
    image: grafana/tempo
    container_name: tempo
    ports:
      - "3200:3200" #tempo
      - "9411:9411" # zipkin
    command: -config.file=/etc/tempo.yaml
    volumes:
      - ./monitoring/tempo/tempo.yml:/etc/tempo.yaml

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources

  # ==========================================================
  # Microservices
  # (Mỗi service build qua Jib có image: ${docker.image.prefix}/<artifactId>:latest)
  # ==========================================================

  eureka-service:
    image: ${docker.image.prefix}/eureka-service:latest
    container_name: eureka-service
    ports:
      - "8761:8761"
    depends_on:
      - postgres
    networks:
      - backend-network

  config-service:
    image: ${docker.image.prefix}/config-service:latest
    container_name: config-service
    ports:
      - "8888:8888"
    depends_on:
      - eureka-service
      - postgres
    networks:
      - backend-network

  api-gateway:
    image: ${docker.image.prefix}/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - eureka-service
      - config-service
    networks:
      - backend-network

  benefit-service:
    image: ${docker.image.prefix}/benefit-service:latest
    container_name: benefit-service
    ports:
      - "8081:8081"
    depends_on:
      - eureka-service
      - config-service
      - postgres
    networks:
      - backend-network

  company-service:
    image: ${docker.image.prefix}/company-service:latest
    container_name: company-service
    ports:
      - "8083:8083"
    depends_on:
      - eureka-service
      - config-service
      - postgres
    networks:
      - backend-network

  industry-service:
    image: ${docker.image.prefix}/industry-service:latest
    container_name: industry-service
    ports:
      - "8084:8084"
    depends_on:
      - eureka-service
      - config-service
      - postgres
    networks:
      - backend-network

  job-service:
    image: ${docker.image.prefix}/job-service:latest
    container_name: job-service
    ports:
      - "8085:8085"
    depends_on:
      - eureka-service
      - config-service
      - postgres
    networks:
      - backend-network

  skill-service:
    image: ${docker.image.prefix}/skill-service:latest
    container_name: skill-service
    ports:
      - "8089:8089"
    depends_on:
      - eureka-service
      - config-service
      - postgres
    networks:
      - backend-network

  specialty-service:
    image: ${docker.image.prefix}/specialty-service:latest
    container_name: specialty-service
    ports:
      - "8090:8090"
    depends_on:
      - eureka-service
      - config-service
      - postgres
    networks:
      - backend-network