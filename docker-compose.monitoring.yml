version: '3.8'

# Sử dụng mạng đã được định nghĩa trong docker-compose chính
networks:
  backend-network:
    external: true
  monitoring-network:
    external: true

# Sử dụng volumes đã được định nghĩa trong docker-compose chính
volumes:
  prometheus-data:
    external: true
  loki-data:
    external: true
  tempo-data:
    external: true
  grafana-data:
    external: true

services:
  #############################################################
  # GRAFANA OBSERVABILITY STACK
  #############################################################

  # Prometheus - Thu thập và lưu trữ metrics
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - backend-network
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Loki - Thu thập và lưu trữ logs
  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    restart: always
    volumes:
      - ./monitoring/loki/loki-config.yaml:/etc/loki/loki-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/loki-config.yaml
    ports:
      - "3100:3100"
    networks:
      - backend-network
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Promtail - Agent thu thập logs và gửi đến Loki
  promtail:
    image: grafana/promtail:2.9.3
    container_name: promtail
    restart: always
    volumes:
      - ./monitoring/promtail/promtail-config.yaml:/etc/promtail/promtail-config.yaml
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/promtail-config.yaml
    networks:
      - monitoring-network
    depends_on:
      - loki

  # Tempo - Thu thập và lưu trữ traces
  tempo:
    image: grafana/tempo:2.3.1
    container_name: tempo
    restart: always
    volumes:
      - ./monitoring/tempo/tempo-config.yaml:/etc/tempo/tempo-config.yaml
      - tempo-data:/tmp/tempo
    command: -config.file=/etc/tempo/tempo-config.yaml
    ports:
      - "3200:3200"      # tempo
      - "4317:4317"      # otlp grpc
      - "4318:4318"      # otlp http
      - "9411:9411"      # zipkin
    networks:
      - backend-network
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3200/status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Grafana - Nền tảng visualization và alerting
  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    restart: always
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    networks:
      - monitoring-network
    depends_on:
      - prometheus
      - loki
      - tempo
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5 